var helpers = require("../../../../../../.nvm/versions/node/v14.16.1/lib/node_modules/parcel/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RegistrationView", ()=>RegistrationView
);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _form = require("react-bootstrap/Form");
var _formDefault = parcelHelpers.interopDefault(_form);
var _row = require("react-bootstrap/Row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _col = require("react-bootstrap/Col");
var _colDefault = parcelHelpers.interopDefault(_col);
var _button = require("react-bootstrap/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _myflixLogoPng = require("url:../../../public/myflix-logo.png");
var _myflixLogoPngDefault = parcelHelpers.interopDefault(_myflixLogoPng);
var _registrationViewScss = require("./registration-view.scss");
var _s = $RefreshSig$();
function RegistrationView(props) {
    _s();
    const [username, setUsername] = _react.useState("");
    const [password, setPassword] = _react.useState("");
    const [email, setEmail] = _react.useState("");
    const [birthday, setBirthday] = _react.useState("");
    const [usernameError, setUsernameError] = _react.useState({
    });
    const [passwordError, setPasswordError] = _react.useState({
    });
    const [emailError, setEmailError] = _react.useState({
    });
    const handleSubmit = (e)=>{
        e.preventDefault();
        const isValid = formValidation();
        if (isValid) _axiosDefault.default.post('https://myflix-jonathon.herokuapp.com/users', {
            Username: username,
            Password: password,
            Email: email,
            Birthday: birthday
        }).then((response)=>{
            const data = response.data;
            console.log(data);
            window.open('/', '_self');
        }).catch((e1)=>{
            console.log('error registering the user');
        });
    };
    const formValidation = ()=>{
        const usernameError1 = {
        };
        const passwordError1 = {
        };
        const emailError1 = {
        };
        let isValid = true;
        if (username.length < 4 || username === '') {
            usernameError1.UsernameToShort = "Username must be more than 4 characters.";
            isValid = false;
        }
        if (password.length < 6 || password === '') {
            passwordError1.noPassword = "You must enter a password at least 6 characters long.";
            isValid = false;
        }
        if (!email || email.indexOf('@') === -1) {
            emailError1.notValidEmail = "Your email doesn't look quite right.";
            isValid = false;
        }
        setUsernameError(usernameError1);
        setPasswordError(passwordError1);
        setEmailError(emailError1);
        return isValid;
    };
    return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
        className: "register-wrapper",
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 69
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement("img", {
        className: "myFlix-logo",
        width: 400,
        src: _myflixLogoPngDefault.default,
        alt: "logo",
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 70
        },
        __self: this
    }), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default, {
        className: "register-form",
        noValidate: true,
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 71
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Group, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 73
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Label, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 74
        },
        __self: this
    }, "Username:"), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Control, {
        type: "text",
        name: "username",
        value: username,
        required: true,
        onChange: (e)=>setUsername(e.target.value)
        ,
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 77
        },
        __self: this
    })), Object.keys(usernameError).map((key)=>{
        return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "form-validation-error",
            key: key,
            __source: {
                fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
                lineNumber: 88
            },
            __self: this
        }, usernameError[key]));
    }), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Group, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 93
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Label, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 94
        },
        __self: this
    }, "Create Password:"), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Control, {
        type: "password",
        name: "password",
        value: password,
        required: true,
        onChange: (e)=>setPassword(e.target.value)
        ,
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 97
        },
        __self: this
    })), Object.keys(passwordError).map((key)=>{
        return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "form-validation-error",
            key: key,
            __source: {
                fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
                lineNumber: 107
            },
            __self: this
        }, passwordError[key]));
    }), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Group, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 112
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Label, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 113
        },
        __self: this
    }, "Email:"), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Control, {
        type: "email",
        name: "email",
        value: email,
        required: true,
        onChange: (e)=>setEmail(e.target.value)
        ,
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 116
        },
        __self: this
    })), Object.keys(emailError).map((key)=>{
        return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
            className: "form-validation-error",
            key: key,
            __source: {
                fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
                lineNumber: 126
            },
            __self: this
        }, emailError[key]));
    }), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Group, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 131
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Label, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 132
        },
        __self: this
    }, "Birthday:"), /*#__PURE__*/ _reactDefault.default.createElement(_formDefault.default.Control, {
        type: "date",
        name: "birthday",
        value: birthday,
        placeholder: "YYYY-MM-DD",
        onChange: (e)=>setBirthday(e.target.value)
        ,
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 135
        },
        __self: this
    })), /*#__PURE__*/ _reactDefault.default.createElement(_rowDefault.default, {
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 143
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
        className: "reg-btns mt-1",
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 144
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_buttonDefault.default, {
        variant: "link",
        href: "/",
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 145
        },
        __self: this
    }, "Back to login")), /*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
        className: "reg-btns mt-1",
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 147
        },
        __self: this
    }, /*#__PURE__*/ _reactDefault.default.createElement(_buttonDefault.default, {
        size: "md",
        variant: "primary",
        type: "submit",
        ml: "4",
        onClick: handleSubmit,
        __source: {
            fileName: "/Users/jonathonroeland/Documents/School Work/myflix-netlify/src/components/registration-view/registration-view.jsx",
            lineNumber: 148
        },
        __self: this
    }, "Submit"))))));
}
_s(RegistrationView, "jCPcO1VOFS64zxuNNZZTxAl1HvI=");
_c = RegistrationView;
RegistrationView.propTypes = {
    register: _propTypesDefault.default.shape({
        Username: _propTypesDefault.default.string.isRequired,
        Password: _propTypesDefault.default.string.isRequired,
        Email: _propTypesDefault.default.string.isRequired,
        BirthDate: _propTypesDefault.default.date
    }),
    onRegister: _propTypesDefault.default.func
};
var _c;
$RefreshReg$(_c, "RegistrationView");

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}